<?php
namespace VideoThumbnail\Site\BlockLayout;

use Omeka\Api\Representation\SitePageBlockRepresentation;
use Omeka\Api\Representation\MediaRepresentation; // Added
use Omeka\Site\BlockLayout\AbstractBlockLayout;
use Laminas\View\Renderer\PhpRenderer;
use Laminas\Form\Form; // Optional: If you need a configuration form for the block
use VideoThumbnail\Form\VideoThumbnailBlockForm; // Added: Assuming this is your form class

/**
 * Represents the Video Thumbnail block for public site pages.
 */
class VideoThumbnailBlock extends AbstractBlockLayout
{
    /**
     * Get the display label for this block layout.
     *
     * @return string
     */
    public function getLabel()
    {
        // This is the name that appears in the "Add new block" dropdown
        return 'Video Thumbnail'; // @translate
    }

    /**
     * Get the configuration form for this block layout.
     *
     * @param PhpRenderer $view
     * @param SitePageBlockRepresentation $block
     * @param array $options
     * @return string Returns HTML form string or empty string if no form.
     */
    public function form(PhpRenderer $view, SitePageBlockRepresentation $block, array $options = [])
    {
        // Get the form for configuring this block.
        // Assumes VideoThumbnailBlockForm is registered in module.config.php
        try {
            /** @var VideoThumbnailBlockForm $form */
            $form = $view->plugin('formElementManager')->get(VideoThumbnailBlockForm::class);
            // Populate the form with any previously saved data for this block instance
            $form->setData($block->data());
            // Render the form using Laminas view helpers
            return $view->formCollection($form, false);
        } catch (\Exception $e) {
            // Log the error if needed
            // error_log("Error loading VideoThumbnailBlock form: " . $e->getMessage());
            return '<p class="err">Error loading block configuration form.</p>'; // @translate
        }
    }

    /**
     * Render the block on the public site page.
     *
     * @param PhpRenderer $view
     * @param SitePageBlockRepresentation $block
     * @return string HTML output for the block.
     */
    public function render(PhpRenderer $view, SitePageBlockRepresentation $block)
    {
        // Get the configured data (likely contains the media ID)
        $data = $block->data();
        $mediaId = $data['media_id'] ?? null; // Adjust 'media_id' if your form uses a different key

        if (!$mediaId) {
            return ''; // No media selected, render nothing
        }

        try {
            // Fetch the Media representation using the API
            /** @var MediaRepresentation $media */
            $media = $view->api()->read('media', $mediaId)->getContent();

            if (!$media) {
                 return sprintf('<p class="err">Media item (ID: %s) not found.</p>', $view->escapeHtml($mediaId)); // @translate
            }

            // Check if it's a video type (optional, but good practice)
            // You might want to refine this check based on your module's supported types
            if (strpos($media->mediaType(), 'video/') !== 0) {
                 return sprintf('<p class="err">Selected item (ID: %s) is not a video.</p>', $view->escapeHtml($mediaId)); // @translate
            }

            // Render the thumbnail for the media item.
            // Use the desired thumbnail type (e.g., 'medium', 'large', 'square')
            // Omeka's thumbnail system will handle finding the correct image,
            // including the one generated by this module if it's set as primary.
            $thumbnailHtml = $media->thumbnail(null, 'medium'); // Use 'medium' or another configured size

            if (!$thumbnailHtml) {
                return sprintf('<p>No thumbnail available for video (ID: %s).</p>', $view->escapeHtml($mediaId)); // @translate
            }

            // Wrap the thumbnail in a div for styling, linking, etc.
            // You might want to link the thumbnail to the item or media page.
            // Example link to item page: $item = $media->item(); $url = $item ? $view->url($item->adminUrl()) : '#';
            return sprintf(
                '<div class="block-video-thumbnail" data-media-id="%s">%s</div>',
                $view->escapeHtmlAttr($mediaId),
                $thumbnailHtml // Contains the <img> tag generated by Omeka
            );

        } catch (\Exception $e) {
            // Log the error if needed
            // error_log("Error rendering VideoThumbnailBlock: " . $e->getMessage());
            return '<p class="err">Error displaying video thumbnail.</p>'; // @translate
        }
    }
}